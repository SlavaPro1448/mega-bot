import os
import logging
import asyncio
import subprocess
import uuid
import shutil
import time
import json
import hmac
import hashlib
from aiohttp import web
from aiogram import Bot, Dispatcher, types
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command, StateFilter
from pathlib import Path
from pyunpack import Archive
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from datetime import datetime, timedelta
import stripe

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_TOKEN = os.getenv("BOT_TOKEN")
PUBLIC_BASE_URL = os.getenv("PUBLIC_BASE_URL")
STRIPE_SECRET_KEY = os.getenv("STRIPE_SECRET_KEY")
STRIPE_PRICE_ID = os.getenv("STRIPE_PRICE_ID")
STRIPE_WEBHOOK_SECRET = os.getenv("STRIPE_WEBHOOK_SECRET")
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))
MAX_UNPACK_BYTES = int(os.getenv("MAX_UNPACK_BYTES", "0"))  # 0 = –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Stripe
stripe.api_key = STRIPE_SECRET_KEY

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ü–∞–ø–∫–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –≤—ã–≥—Ä—É–∑–∫–∏
OUTPUT_DIR = str(Path("/app/–∞–∫–∫–∞—É–Ω—Ç"))
DOWNLOAD_DIR = '/app/downloads'

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
for directory in [OUTPUT_DIR, DOWNLOAD_DIR]:
    os.makedirs(directory, exist_ok=True)

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–∏—Ü–µ–Ω–∑–∏–π
LICENSES_FILE = "/app/licenses.json"

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–∏—Ü–µ–Ω–∑–∏—è–º–∏
def load_licenses():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ª–∏—Ü–µ–Ω–∑–∏–π –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    try:
        if os.path.exists(LICENSES_FILE):
            with open(LICENSES_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        return {"users": {}, "pending_by_email": {}, "subs": {}}
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–∏—Ü–µ–Ω–∑–∏–π: {e}")
        return {"users": {}, "pending_by_email": {}, "subs": {}}

def save_licenses(data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ª–∏—Ü–µ–Ω–∑–∏–π –≤ JSON —Ñ–∞–π–ª"""
    try:
        with open(LICENSES_FILE, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        return True
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–∏—Ü–µ–Ω–∑–∏–π: {e}")
        return False

def is_license_active(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ –ª–∏—Ü–µ–Ω–∑–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        licenses = load_licenses()
        user_id_str = str(user_id)
        
        if user_id_str not in licenses["users"]:
            return False
            
        user_data = licenses["users"][user_id_str]
        expires_ts = user_data.get("expires_ts", 0)
        grace_until = user_data.get("grace_until", 0)
        current_time = int(time.time())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
        if expires_ts > current_time:
            return True
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–µ–π—Å-–ø–µ—Ä–∏–æ–¥
        if grace_until > current_time:
            return True
            
        return False
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏—Ü–µ–Ω–∑–∏–∏: {e}")
        return False

def update_user_license(user_id, expires_ts, email=None):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –ª–∏—Ü–µ–Ω–∑–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        licenses = load_licenses()
        user_id_str = str(user_id)
        
        if user_id_str not in licenses["users"]:
            licenses["users"][user_id_str] = {}
            
        licenses["users"][user_id_str]["expires_ts"] = expires_ts
        if email:
            licenses["users"][user_id_str]["email"] = email
            
        return save_licenses(licenses)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–∏—Ü–µ–Ω–∑–∏–∏: {e}")
        return False

def add_subscription_mapping(subscription_id, user_id):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –º–∞–ø–ø–∏–Ω–≥ subscription_id -> user_id"""
    try:
        licenses = load_licenses()
        licenses["subs"][subscription_id] = {"user_id": int(user_id)}
        return save_licenses(licenses)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞–ø–ø–∏–Ω–≥–∞ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False

def get_user_by_subscription(subscription_id):
    """–ü–æ–ª—É—á–∞–µ—Ç user_id –ø–æ subscription_id"""
    try:
        licenses = load_licenses()
        return licenses["subs"].get(subscription_id, {}).get("user_id")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ: {e}")
        return None

# –°–æ—Å—Ç–æ—è–Ω–∏—è
class DownloadState(StatesGroup):
    waiting_for_link = State()

# –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞
def recursively_unpack(archive_path, extract_dir):
    try:
        Archive(str(archive_path)).extractall(extract_dir)
        os.remove(archive_path)
        for file in os.listdir(extract_dir):
            file_path = Path(extract_dir) / file
            if file_path.is_file() and file_path.suffix.lower() in ['.zip', '.rar', '.7z']:
                recursively_unpack(file_path, extract_dir)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–∞—Ä—Ö–∏–≤–∞—Ü–∏–∏: {str(e)}")

# /start
@dp.message(Command(commands=['start']))
async def send_welcome(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏—Ü–µ–Ω–∑–∏—é
    if not is_license_active(user_id):
        pay_url = f"{PUBLIC_BASE_URL}/pay/checkout?user_id={user_id}"
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", url=pay_url)]
        ])
        await message.reply(
            "–ü—Ä–∏–≤–µ—Ç! –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω—É–∂–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞.\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:",
            reply_markup=keyboard
        )
        return
    
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ MEGA ‚Äî —è –∏—Ö —Å–∫–∞—á–∞—é –∏ —Ä–∞–∑–∞—Ä—Ö–∏–≤–∏—Ä—É—é.")
    await state.set_state(DownloadState.waiting_for_link)

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–æ–∫
@dp.message(StateFilter(DownloadState.waiting_for_link))
async def process_link(message: types.Message, state: FSMContext):
    import re
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏—Ü–µ–Ω–∑–∏—é
    if not is_license_active(message.from_user.id):
        pay_url = f"{PUBLIC_BASE_URL}/pay/checkout?user_id={message.from_user.id}"
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", url=pay_url)]
        ])
        await message.reply(
            "–î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Å—ã–ª–æ–∫ –Ω—É–∂–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞.\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:",
            reply_markup=keyboard
        )
        return
    
    links = re.findall(r'https?://mega\.nz/\S+', message.text)
    if not links:
        await message.reply("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π —Å—Å—ã–ª–∫–∏ –Ω–∞ MEGA.")
        return

    user_id = str(message.from_user.id)
    user_output_dir = Path(OUTPUT_DIR) / user_id
    user_output_dir.mkdir(parents=True, exist_ok=True)
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –Ω–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
    import shutil
    for old_file in user_output_dir.glob("*"):
        if old_file.is_file():
            old_file.unlink()
        elif old_file.is_dir():
            shutil.rmtree(old_file, ignore_errors=True)
    import time
    start_time = time.time()

    for file in os.listdir(DOWNLOAD_DIR):
        file_path = Path(DOWNLOAD_DIR) / file
        if file_path.is_file():
            os.remove(file_path)

    for link in links:
        try:
            # –ü—Ä–æ–±—É–µ–º megatools, –µ—Å–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - megadl
            if shutil.which("megatools"):
                cmd = ["megatools", "dl", "--path", str(DOWNLOAD_DIR), link]
            elif shutil.which("megadl"):
                cmd = ["megadl", "--path", str(DOWNLOAD_DIR), link]
            else:
                await message.reply("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∏ megatools, –Ω–∏ megadl")
                continue
                
            result = subprocess.run(cmd, capture_output=True, text=True)
            if result.returncode != 0:
                await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏: {result.stderr}")
                continue

            downloaded_files = sorted(
                [f for f in os.listdir(DOWNLOAD_DIR) if (Path(DOWNLOAD_DIR) / f).is_file()],
                key=lambda f: os.path.getmtime(Path(DOWNLOAD_DIR) / f),
                reverse=True
            )
            if not downloaded_files:
                await message.reply("–§–∞–π–ª –Ω–µ –±—ã–ª —Å–∫–∞—á–∞–Ω.")
                continue

            file_path = Path(DOWNLOAD_DIR) / downloaded_files[0]
            if file_path.suffix.lower() in ['.zip', '.rar', '.7z']:
                extract_dir = os.path.join(user_output_dir, file_path.stem)
                os.makedirs(extract_dir, exist_ok=True)
                recursively_unpack(file_path, extract_dir)
            else:
                new_path = user_output_dir / file_path.name
                os.rename(file_path, new_path)

            if 'extract_dir' in locals() and os.path.exists(extract_dir):
                for root, dirs, files in os.walk(extract_dir, topdown=False):
                    for name in files:
                        fpath = Path(root) / name
                        if fpath.suffix.lower() in ['.json', '.session']:
                            os.rename(fpath, user_output_dir / fpath.name)
                        else:
                            os.remove(fpath)
                    for d in dirs:
                        try:
                            os.rmdir(Path(root) / d)
                        except OSError:
                            pass
                try:
                    os.rmdir(extract_dir)
                except OSError:
                    pass

        except Exception as e:
            await message.reply(f"–û—à–∏–±–∫–∞: {str(e)}")

    final_files = [f for f in user_output_dir.iterdir() if f.is_file() and f.suffix.lower() in ['.json', '.session']]
    # –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã, –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    recent_files = []
    for f in final_files:
        if f.stat().st_mtime >= start_time:
            recent_files.append(f)
    final_files = recent_files

    if not final_files:
        await message.reply("–ì–æ—Ç–æ–≤–æ! –ù–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ .json –∏–ª–∏ .session.")
    else:
        share_id = str(uuid.uuid4())
        share_folder = Path("/app/share") / user_id / share_id
        share_folder.mkdir(parents=True, exist_ok=True)
        for f in final_files:
            shutil.copy(f, share_folder / f.name)

        # –£–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç
        async def delayed_cleanup(folder, delay=1800):
            await asyncio.sleep(delay)
            try:
                shutil.rmtree(folder)
                zip_path = folder.with_suffix(".zip")
                if zip_path.exists():
                    zip_path.unlink()
                logging.info(f"–£–¥–∞–ª–µ–Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞ –∏ zip: {folder}")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {str(e)}")

        asyncio.create_task(delayed_cleanup(share_folder))

        remaining_seconds = 30 * 60
        minutes = remaining_seconds // 60
        seconds = remaining_seconds % 60
        countdown_str = f"{minutes:02}:{seconds:02}"

        download_link = f"https://{os.getenv('RAILWAY_STATIC_URL')}/download/{user_id}/{share_id}"
        archive_message = await message.reply(
            f"–ì–æ—Ç–æ–≤–æ! –í–æ—Ç —Å—Å—ã–ª–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è ZIP-–∞—Ä—Ö–∏–≤–∞:\n{download_link}\n\n"
            f"‚è≥ –î–æ —É–¥–∞–ª–µ–Ω–∏—è –∞—Ä—Ö–∏–≤–∞: {countdown_str}"
        )
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥ —Å –æ–±—Ä–∞—Ç–Ω—ã–º –æ—Ç—Å—á—ë—Ç–æ–º
        async def update_countdown(msg, delay):
            for sec in range(delay - 1, 0, -30):  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                minutes = sec // 60
                seconds = sec % 60
                countdown_str = f"{minutes:02}:{seconds:02}"
                try:
                    await msg.edit_text(
                        f"–ì–æ—Ç–æ–≤–æ! –í–æ—Ç —Å—Å—ã–ª–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è ZIP-–∞—Ä—Ö–∏–≤–∞:\n{download_link}\n\n"
                        f"‚è≥ –î–æ —É–¥–∞–ª–µ–Ω–∏—è –∞—Ä—Ö–∏–≤–∞: {countdown_str}"
                    )
                except Exception as e:
                    logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
                    break
                await asyncio.sleep(30)  # –ñ–¥–µ–º 30 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏

        asyncio.create_task(update_countdown(archive_message, remaining_seconds))
        buttons = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì• –°–∫–∞—á–∞—Ç—å —Å–Ω–æ–≤–∞", url=download_link)],
            [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –∞—Ä—Ö–∏–≤", callback_data="delete_last")]
        ])
        await message.reply("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?", reply_markup=buttons)

# –ö–æ–º–∞–Ω–¥–∞ /pay
@dp.message(Command(commands=['pay']))
async def pay_command(message: types.Message):
    if message.chat.type == 'private':
        pay_url = f"{PUBLIC_BASE_URL}/pay/checkout?user_id={message.from_user.id}"
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", url=pay_url)]
        ])
        await message.reply(
            "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω—É–∂–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞.\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:",
            reply_markup=keyboard
        )
    else:
        await message.reply("–ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –±–æ—Ç–æ–º.")

# –ö–æ–º–∞–Ω–¥–∞ /status
@dp.message(Command(commands=['status']))
async def status_command(message: types.Message):
    user_id = message.from_user.id
    licenses = load_licenses()
    user_id_str = str(user_id)
    
    if user_id_str in licenses["users"]:
        user_data = licenses["users"][user_id_str]
        expires_ts = user_data.get("expires_ts", 0)
        current_time = int(time.time())
        
        if expires_ts > current_time:
            expires_date = datetime.fromtimestamp(expires_ts).strftime("%d.%m.%Y %H:%M")
            await message.reply(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ {expires_date}")
        else:
            grace_until = user_data.get("grace_until", 0)
            if grace_until > current_time:
                grace_date = datetime.fromtimestamp(grace_until).strftime("%d.%m.%Y %H:%M")
                await message.reply(f"‚ö†Ô∏è –ì—Ä–µ–π—Å-–ø–µ—Ä–∏–æ–¥ –¥–æ {grace_date}")
            else:
                await message.reply("‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞")
    else:
        await message.reply("‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

# –ö–æ–º–∞–Ω–¥–∞ /link (fallback –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Å–≤—è–∑—ã–≤–∞–Ω–∏—è –ø–æ email)
@dp.message(Command(commands=['link']))
async def link_command(message: types.Message):
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º email –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        command_parts = message.text.split()
        if len(command_parts) < 2:
            await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /link <email>")
            return
            
        email = command_parts[1].strip()
        user_id = message.from_user.id
        
        licenses = load_licenses()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ–∂–∏–¥–∞—é—â–∞—è –æ–ø–ª–∞—Ç–∞ –¥–ª—è —ç—Ç–æ–≥–æ email
        if email in licenses["pending_by_email"]:
            expires_ts = licenses["pending_by_email"][email]
            
            # –ü–µ—Ä–µ–Ω–æ—Å–∏–º –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
            update_user_license(user_id, expires_ts, email)
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ –æ–∂–∏–¥–∞—é—â–∏—Ö
            del licenses["pending_by_email"][email]
            save_licenses(licenses)
            
            expires_date = datetime.fromtimestamp(expires_ts).strftime("%d.%m.%Y %H:%M")
            await message.reply(f"‚úÖ –õ–∏—Ü–µ–Ω–∑–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–æ {expires_date}")
        else:
            await message.reply("‚ùå –û–∂–∏–¥–∞—é—â–∞—è –æ–ø–ª–∞—Ç–∞ –¥–ª—è —ç—Ç–æ–≥–æ email –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /link: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã")

# –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
@dp.message(Command(commands=['grant']))
async def grant_command(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.reply("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return
        
    try:
        command_parts = message.text.split()
        if len(command_parts) < 3:
            await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /grant <user_id> <days>")
            return
            
        target_user_id = int(command_parts[1])
        days = int(command_parts[2])
        
        expires_ts = int(time.time()) + (days * 24 * 60 * 60)
        update_user_license(target_user_id, expires_ts)
        
        expires_date = datetime.fromtimestamp(expires_ts).strftime("%d.%m.%Y %H:%M")
        await message.reply(f"‚úÖ –õ–∏—Ü–µ–Ω–∑–∏—è –≤—ã–¥–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id} –¥–æ {expires_date}")
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /grant: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã")

@dp.message(Command(commands=['revoke']))
async def revoke_command(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.reply("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return
        
    try:
        command_parts = message.text.split()
        if len(command_parts) < 2:
            await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /revoke <user_id>")
            return
            
        target_user_id = int(command_parts[1])
        
        licenses = load_licenses()
        user_id_str = str(target_user_id)
        
        if user_id_str in licenses["users"]:
            del licenses["users"][user_id_str]
            save_licenses(licenses)
            await message.reply(f"‚úÖ –õ–∏—Ü–µ–Ω–∑–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} –æ—Ç–æ–∑–≤–∞–Ω–∞")
        else:
            await message.reply(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /revoke: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã")

@dp.message()
async def fallback(message: types.Message):
    await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /start –∏ –æ—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫–∏ –Ω–∞ MEGA.")

@dp.callback_query(lambda c: c.data == "upload_more")
async def handle_upload_more(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.answer("–•–æ—Ä–æ—à–æ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ MEGA:")
    await state.set_state(DownloadState.waiting_for_link)
    await callback_query.answer()

@dp.callback_query(lambda c: c.data == "delete_last")
async def handle_delete_last(callback_query: CallbackQuery):
    import shutil
    from glob import glob

    # –£–¥–∞–ª—è–µ–º –∞—Ä—Ö–∏–≤—ã .zip, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    user_id = str(callback_query.from_user.id)
    user_zip_dir = Path("/app/share") / user_id
    for zip_file in user_zip_dir.glob("**/*.zip"):
        try:
            zip_file.unlink()
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∞—Ä—Ö–∏–≤: {zip_file} ‚Äî {e}")

    try:
        await callback_query.message.delete()
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {str(e)}")

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Å—ã–ª–∫–æ–π, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
    async for msg in callback_query.message.chat.get_history(limit=5):
        if msg.text and "—Å—Å—ã–ª–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è" in msg.text:
            try:
                await msg.delete()
                break
            except Exception as e:
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Å—ã–ª–∫–æ–π: {str(e)}")

    user_folder = Path("/app/–∞–∫–∫–∞—É–Ω—Ç") / user_id
    share_folder = Path("/app/share") / user_id
    try:
        if user_folder.exists():
            shutil.rmtree(user_folder)
        if share_folder.exists():
            shutil.rmtree(share_folder)
        zip_files = list(Path("/app/share") / user_id).glob("**/*.zip")
        for zip_file in zip_files:
            try:
                zip_file.unlink()
            except Exception as e:
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å zip-—Ñ–∞–π–ª: {zip_file} ‚Äî {e}")
        await callback_query.message.answer("–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ñ–∞–π–ª—ã –∏ –∞—Ä—Ö–∏–≤—ã —É–¥–∞–ª–µ–Ω—ã.")
    except Exception as e:
        await callback_query.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {str(e)}")
    await callback_query.answer()

async def main():
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
    async def handle_download(request):
        token1 = request.match_info.get("token1")
        token2 = request.match_info.get("token2")
        folder = Path("/app/share") / token1 / token2
        if folder.exists() and folder.is_dir():
            zip_path = folder.with_suffix(".zip")
            if not zip_path.exists():
                shutil.make_archive(str(zip_path.with_suffix("")), 'zip', folder)
            return web.FileResponse(path=zip_path)
        return web.Response(status=404, text="Not found")

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è health check
    async def handle_health(request):
        return web.Response(text="ok")

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Stripe Checkout Session
    async def handle_checkout(request):
        try:
            user_id = request.query.get('user_id')
            if not user_id or not user_id.isdigit() or int(user_id) <= 0:
                return web.Response(status=400, text="Invalid user_id")
            
            user_id = int(user_id)
            
            # –°–æ–∑–¥–∞–µ–º Stripe Checkout Session
            checkout_session = stripe.checkout.Session.create(
                mode='subscription',
                line_items=[{
                    'price': STRIPE_PRICE_ID,
                    'quantity': 1,
                }],
                metadata={
                    'user_id': str(user_id)
                },
                success_url=f"{PUBLIC_BASE_URL}/pay/success?u={user_id}",
                cancel_url=f"{PUBLIC_BASE_URL}/pay/cancel?u={user_id}",
            )
            
            logging.info(f"Created checkout session for user {user_id}: {checkout_session.id}")
            return web.HTTPFound(location=checkout_session.url)
            
        except Exception as e:
            logging.error(f"Error creating checkout session: {e}")
            return web.Response(status=500, text="Internal server error")

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è Stripe webhooks
    async def handle_stripe_webhook(request):
        try:
            payload = await request.text()
            sig_header = request.headers.get('stripe-signature')
            
            # –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å
            try:
                event = stripe.Webhook.construct_event(
                    payload, sig_header, STRIPE_WEBHOOK_SECRET
                )
            except ValueError as e:
                logging.error(f"Invalid payload: {e}")
                return web.Response(status=400, text="Invalid payload")
            except stripe.error.SignatureVerificationError as e:
                logging.error(f"Invalid signature: {e}")
                return web.Response(status=400, text="Invalid signature")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è
            if event['type'] == 'checkout.session.completed':
                session = event['data']['object']
                user_id = session['metadata'].get('user_id')
                subscription_id = session.get('subscription')
                
                if user_id and subscription_id:
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ
                    subscription = stripe.Subscription.retrieve(subscription_id)
                    expires_ts = subscription.current_period_end
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞–ø–ø–∏–Ω–≥ subscription -> user_id
                    add_subscription_mapping(subscription_id, user_id)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ª–∏—Ü–µ–Ω–∑–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    update_user_license(int(user_id), expires_ts)
                    
                    logging.info(f"Subscription activated for user {user_id} until {expires_ts}")
            
            elif event['type'] == 'invoice.payment_succeeded':
                invoice = event['data']['object']
                subscription_id = invoice.get('subscription')
                
                if subscription_id:
                    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ subscription_id
                    user_id = get_user_by_subscription(subscription_id)
                    
                    if user_id:
                        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ
                        subscription = stripe.Subscription.retrieve(subscription_id)
                        expires_ts = subscription.current_period_end
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º –ª–∏—Ü–µ–Ω–∑–∏—é
                        update_user_license(user_id, expires_ts)
                        
                        logging.info(f"Subscription renewed for user {user_id} until {expires_ts}")
            
            elif event['type'] == 'invoice.payment_failed':
                invoice = event['data']['object']
                subscription_id = invoice.get('subscription')
                
                if subscription_id:
                    user_id = get_user_by_subscription(subscription_id)
                    
                    if user_id:
                        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥—Ä–µ–π—Å-–ø–µ—Ä–∏–æ–¥ –Ω–∞ 3 –¥–Ω—è
                        grace_until = int(time.time()) + (3 * 24 * 60 * 60)
                        
                        licenses = load_licenses()
                        user_id_str = str(user_id)
                        if user_id_str in licenses["users"]:
                            licenses["users"][user_id_str]["grace_until"] = grace_until
                            save_licenses(licenses)
                            
                        logging.info(f"Payment failed for user {user_id}, grace period until {grace_until}")
            
            elif event['type'] == 'customer.subscription.deleted':
                subscription = event['data']['object']
                subscription_id = subscription['id']
                
                user_id = get_user_by_subscription(subscription_id)
                
                if user_id:
                    # –£–¥–∞–ª—è–µ–º –ª–∏—Ü–µ–Ω–∑–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    licenses = load_licenses()
                    user_id_str = str(user_id)
                    if user_id_str in licenses["users"]:
                        del licenses["users"][user_id_str]
                    if subscription_id in licenses["subs"]:
                        del licenses["subs"][subscription_id]
                    save_licenses(licenses)
                    
                    logging.info(f"Subscription cancelled for user {user_id}")
            
            return web.Response(text="OK")
            
        except Exception as e:
            logging.error(f"Error processing webhook: {e}")
            return web.Response(status=500, text="Internal server error")

    # –°–æ–∑–¥–∞–µ–º aiohttp –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = web.Application()
    app.router.add_get("/health", handle_health)
    app.router.add_get("/pay/checkout", handle_checkout)
    app.router.add_post("/webhooks/stripe", handle_stripe_webhook)
    app.router.add_get("/download/{token1}/{token2}", handle_download)
    
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, port=8080)
    await site.start()

    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
